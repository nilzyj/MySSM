<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--xmlns="http://www.springframework.org/schema/beans"表示这是spring beans的xml配置文件-->
    <!--该文件根据命名约定{servlet-name}-servlet.xml命名-->


    <!--不使用注解的配置-->
    <!--<bean name="/hello" class="com.dim.beginspring.HelloReaderController"/>-->
    <!--处理映射器将bean的name作为url进行查找，需要在配置Handle时指定name（即url）-->
    <!--<bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/>-->
    <!--处理器适配器，所有处理器适配器都要实现HandlerAdapter接口-->
    <!--<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/>-->

    <!--使用注解的配置-->
    <!--该包中所有注解的Bean都会被自动注册到应用程序上下文中-->
    <!--配置要扫描的包-->
    <context:component-scan base-package="com.dim.beginspring"/>
    <!--激活Bean中定义的注解-->
    <context:annotation-config />
    <!--配置annotation类型的处理映射器-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->
    <!--配置annotation类型的处理器适配器-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>-->

    <!--spring4.0之后，不配置处理映射器、处理器适配器、视图解析器，则会使用默认的-->
    <!--spring4.0之后，有更简便的方式-->

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--定义前缀后缀以便获取jsp-->
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--freeMarker视图解析器配置-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="contentType" value="text/html; charset=utf-8" />
        <property name="prefix" value="" />
        <property name="suffix" value=".ftl" />
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="cache" value="false"/>
        <!-- 此变量值为pageContext.request, 页面使用方法：rc.contextPath -->
        <property name="requestContextAttribute" value="rc" />
        <!-- 将请求和会话属性作为变量暴露给FreeMarker模板使用。要做到这一点，可以设置exposeRequestAttributes或者exposeSessionAttributes为true -->
        <property name="exposeRequestAttributes" value="true" />
        <property name="exposeSessionAttributes" value="true" />
        <!-- 使用这些宏，必须设置FreeMarkerViewResolver的exposeMacroHelpers属性为true -->
        <property name="exposeSpringMacroHelpers" value="true" />
        <!--解析器优先级别，值小优先-->
        <property name="order" value="0" />
        <property name="allowSessionOverride" value="true" />
    </bean>

    <!-- freeMarker的模板路径配置 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl/" />
        <property name="defaultEncoding" value="UTF-8" />
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape" />
                <!--<entry key="api" value-ref="api"/>-->
                <!--<entry key="webRoot" value="${webRoot}"></entry>-->
                <!--<entry key="jsRoot" value="${jsRoot}"></entry>-->
            </map>
        </property>
        <!-- FreeMarker默认每隔5秒检查模板是否被更新，如果已更新，则重新加载并分析模板。
        但经常检查模板是否更新可能比较耗时。如果应用运行在生产模式下，而且模板不会经常更新，
            则可以将更新的延迟时间延长至一个小时或者更久。
            可以通过为freemarkerSettings属性设置template_update_delay达到这一目的 -->
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">0</prop>
                <!-- 设置标签类型 两种：[] 和 <> 。[] 这种标记解析要快些 -->
                <prop key="tag_syntax">auto_detect</prop>
                <!--默认编码格式-->
                <prop key="default_encoding">UTF-8</prop>
                <prop key="output_encoding">UTF-8</prop>
                <!--url编码-->
                <prop key="url_escaping_charset">UTF-8</prop>
                <!--本地化设置-->
                <prop key="locale">zh_CN</prop>
                <!--<prop key="locale">UTF-8</prop>-->
                <!--日期格式-->
                <prop key="date_format">yyyy-MM-dd</prop>
                <!--时间格式-->
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <!-- 设置数字格式 以免出现 000.00 -->
                <prop key="number_format">#</prop>
                <!-- 默认情况变量为null则替换为空字符串，如果需要自定义，写上${empty!"EmptyValue of fbysss"}的形式即可  -->
                <prop key="classic_compatible">true</prop>
                <!-- ignore,debug,html_debug,rethrow -->
                <prop key="template_exception_handler">html_debug</prop>
                <!--去掉多余的空格-->
                <prop key="whitespace_stripping">true</prop>
            </props>
        </property>
        <!-- 以下语句也可以配置freemarkerSettings属性，代码更为简洁 -->
        <!-- <property name="freemarkerSettings" ref="freemarkerConfiguration"></property> -->
    </bean>

    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape" />

    <!--  上传文件定义大小 -->
    <!--<bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:defaultEncoding="utf-8">
        <property name="maxUploadSize" value="50048000" />
    </bean>-->

</beans>